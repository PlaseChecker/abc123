-- ‚ö†Ô∏è –í–í–ï–î–ò–¢–ï –í–ê–® –í–ï–ë–•–£–ö –î–ò–°–ö–û–†–î–ê –ó–î–ï–°–¨ ‚ö†Ô∏è
local webhookUrl = "https://discord.com/api/webhooks/1364951193666719794/QEaxv4KpUuzDKot_ZXA5dLf1-u3pj55JBsThXO0u_gvqOh0xI9eqh2m3WFwY1P17wL9J"
local localOutputEnabled = true -- –í–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

-- –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local PlayerName = game.Players.LocalPlayer.Name

-- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
local gameIds = {
    [142823291] = "MM2",         -- Murder Mystery 2
    [13772394625] = "BladeBall", -- Blade Ball
    [3978370137] = "GPO",        -- Grand Piece Online
    [1730877806] = "GPO",        -- Grand Piece Online (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
    [4996049426] = "GPO",        -- Grand Piece Online (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
    [7449423635] = "GPO"         -- Grand Piece Online (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
}

local currentGame = gameIds[game.PlaceId]
print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–≥—Ä–∞:", currentGame or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞")

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API –∏ –æ–±—ä–µ–∫—Ç–∞–º
local function safeGet(parent, path)
    local current = parent
    local parts = string.split(path, ".")
    
    for _, part in ipairs(parts) do
        if current and typeof(current) == "Instance" then
            current = current:FindFirstChild(part)
        else
            return nil
        end
    end
    
    return current
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
local function saveResultsToFile(gameType, itemsList)
    local success, errorMsg = pcall(function()
        -- –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è Python-–ø—Ä–æ–≥—Ä–∞–º–º–æ–π
        local httpService = game:GetService("HttpService")
        local data = {
            gameType = gameType,
            playerName = PlayerName,
            items = itemsList,
            timestamp = os.date("%Y-%m-%d %H:%M:%S")
        }
        
        local json = httpService:JSONEncode(data)
        
        -- Try to write the file multiple times to ensure it's created
        local fileWritten = false
        local attempts = 0
        local maxAttempts = 5
        
        while not fileWritten and attempts < maxAttempts do
            attempts = attempts + 1
            
            local writeSuccess, writeError = pcall(function()
                writefile("plase_results.json", json)
            end)
            
            if writeSuccess then
                fileWritten = true
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª –¥–ª—è PLASE CHECKER (–ø–æ–ø—ã—Ç–∫–∞ " .. attempts .. ")")
            else
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ " .. attempts .. "): " .. tostring(writeError))
                wait(1) -- Wait 1 second before retry
            end
        end
        
        if not fileWritten then
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ " .. maxAttempts .. " –ø–æ–ø—ã—Ç–æ–∫")
        end
        
        -- Create a "flag" file to signal the Python program that the scan is complete
        pcall(function()
            writefile("plase_scan_complete.txt", os.date("%Y-%m-%d %H:%M:%S"))
        end)
    end)
    
    if not success then
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", errorMsg)
    end
end

-- –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
local function splitMessage(message, gameType)
    local MAX_LENGTH = 1950
    local parts = {}
    local currentPart = ""
    
    for line in message:gmatch("[^\r\n]+") do
        if #currentPart + #line + 2 > MAX_LENGTH then
            if #currentPart > 0 then
                table.insert(parts, currentPart)
                currentPart = ""
            end
            
            while #line > MAX_LENGTH do
                table.insert(parts, line:sub(1, MAX_LENGTH))
                line = line:sub(MAX_LENGTH + 1)
            end
        end
        
        if #currentPart > 0 then
            currentPart = currentPart .. "\n" .. line
        else
            currentPart = line
        end
    end
    
    if #currentPart > 0 then
        table.insert(parts, currentPart)
    end
    
    for i, part in ipairs(parts) do
        if i == 1 then
            parts[i] = string.format("**üì¶ %s Inventory Report**\n```\n%s", gameType, part)
        else
            parts[i] = "```\n" .. part
        end
        parts[i] = parts[i] .. "\n```"
    end
    
    return parts
end

-- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord
local function sendToDiscord(message)
    if type(message) ~= "table" then
        message = {message}
    end
    
    for _, msg in ipairs(message) do
        local data = {
            content = msg
        }
        
        local success, err = pcall(function()
            local httpService = game:GetService("HttpService")
            request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = httpService:JSONEncode(data)
            })
        end)
        
        if not success then
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:", err)
        end
        
        wait(1)
    end
end

-- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Blade Ball
local function getBBSwordRarity(swordInstance)
    if not swordInstance then return "Unknown" end
    return swordInstance:GetAttribute("Rarity") or "Unknown"
end

-- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Blade Ball
local function formatBladeBallMessage(rarityCategories)
    if not rarityCategories then return "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∫–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã" end
    
    local message = ""
    message = message .. "üë§ Player: " .. PlayerName .. "\n"
    message = message .. "‚è∞ Time: " .. os.date("%Y-%m-%d %H:%M:%S") .. "\n\n"
    
    local totalSwords = 0
    for _, swords in pairs(rarityCategories) do
        totalSwords = totalSwords + #swords
    end
    
    message = message .. "üìä Statistics:\n"
    local raritySymbols = {
        ["Limited"] = "üåü",
        ["Legendary"] = "‚≠ê",
        ["Epic"] = "üí´",
        ["Rare"] = "‚ú®",
        ["Common"] = "‚ö™",
        ["Unknown"] = "‚ùì"
    }
    
    for rarity, swords in pairs(rarityCategories) do
        if #swords > 0 then
            message = message .. (raritySymbols[rarity] or "‚ùì") .. " " .. rarity .. ": " .. #swords .. "\n"
        end
    end
    message = message .. "üó°Ô∏è Total Items: " .. totalSwords .. "\n\n"

    for rarity, swords in pairs(rarityCategories) do
        if #swords > 0 then
            table.sort(swords, function(a, b)
                return a.name < b.name
            end)

            message = message .. "\n" .. (raritySymbols[rarity] or "‚ùì") .. " " .. rarity .. " " .. (raritySymbols[rarity] or "‚ùì") .. "\n"
            
            for _, sword in ipairs(swords) do
                message = message .. "‚îî‚îÄ‚öîÔ∏è " .. sword.name .. "\n"
            end
        end
    end

    return message, rarityCategories
end

local function scanBladeBall()
    print("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Blade Ball...")
    
    -- –ò—â–µ–º GUI –º–∞–≥–∞–∑–∏–Ω–∞ —É –∏–≥—Ä–æ–∫–∞
    local playerGui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then
        return {"‚ö†Ô∏è Error: PlayerGui not found"}
    end
    
    -- –ò—â–µ–º –ª—é–±–æ–π –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—É—Ç—å –∫ –º–µ—á–∞–º
    local foundSwords = false
    local rarityCategories = {
        ["Limited"] = {},
        ["Legendary"] = {},
        ["Epic"] = {},
        ["Rare"] = {},
        ["Common"] = {},
        ["Unknown"] = {}
    }
    
    -- –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—É—Ç—è–º GUI
    local potentialPaths = {
        {"Shop", "Holder", "Pages", "Sword", "Owned"},
        {"SwordShop", "Main", "Items"},
        {"BladeUI", "SwordInventory", "Items"},
        {"SwordMenu", "Inventory", "Swords"}
    }
    
    for _, pathParts in ipairs(potentialPaths) do
        local current = playerGui
        local pathValid = true
        
        for _, part in ipairs(pathParts) do
            current = current:FindFirstChild(part)
            if not current then
                pathValid = false
                break
            end
        end
        
        if pathValid then
            print("‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ –º–µ—á–∞–º:", table.concat(pathParts, "."))
            
            -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—á–∏
            for _, sword in pairs(current:GetChildren()) do
                local swordName = sword.Name:match("|(.+)$") or sword.Name
                if swordName then
                    local rarity = getBBSwordRarity(sword)
                    local category = rarityCategories[rarity] or rarityCategories["Unknown"]
                    table.insert(category, {
                        name = swordName,
                        rarity = rarity
                    })
                    foundSwords = true
                end
            end
            
            if foundSwords then
                break -- –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ—á–∏
            end
        end
    end
    
    if not foundSwords then
        -- –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º GUI
        print("–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ—á–∏ –ø–æ –≤—Å–µ–º GUI...")
        local function searchForSwords(parent)
            for _, child in pairs(parent:GetChildren()) do
                if child:IsA("Frame") and child:GetAttribute("Rarity") then
                    local swordName = child.Name:match("|(.+)$") or child.Name
                    local rarity = getBBSwordRarity(child)
                    local category = rarityCategories[rarity] or rarityCategories["Unknown"]
                    table.insert(category, {
                        name = swordName,
                        rarity = rarity
                    })
                    foundSwords = true
                elseif child:IsA("Instance") and #child:GetChildren() > 0 then
                    searchForSwords(child)
                end
            end
        end
        
        searchForSwords(playerGui)
    end
    
    if not foundSwords then
        return {"‚ö†Ô∏è Error: Could not find any swords in Blade Ball"}
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è Python
    if localOutputEnabled then
        -- –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        local itemsList = {}
        for rarity, swords in pairs(rarityCategories) do
            for _, sword in ipairs(swords) do
                table.insert(itemsList, {
                    name = sword.name,
                    rarity = rarity
                })
            end
        end
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        saveResultsToFile("Blade Ball", itemsList)
    end
    
    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üìù Attempting to write results file...")
    local fileCheck = pcall(function()
        writefile("plase_scan_started.txt", os.date("%Y-%m-%d %H:%M:%S"))
    end)
    print("üìù File write test result: " .. (fileCheck and "Success" or "Failed"))
    
    -- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Blade Ball
    local message = formatBladeBallMessage(rarityCategories)
    return splitMessage(message, "Blade Ball")
end

-- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è GPO
local function getGPOFruitRarity(fruitName)
    if not fruitName then return nil end
    
    local fruitData = {
        -- Mythical (0.5%)
        ["Doku"] = {rarity = "Mythical", type = "Paramecia"},
        ["Mochi"] = {rarity = "Mythical", type = "Paramecia"},
        ["Ope"] = {rarity = "Mythical", type = "Paramecia"},
        ["Tori"] = {rarity = "Mythical", type = "Zoan"},
        ["Buddha"] = {rarity = "Mythical", type = "Zoan"},
        
        -- Legendary (4.0%)
        ["Gura"] = {rarity = "Legendary", type = "Paramecia"},
        ["Hie"] = {rarity = "Legendary", type = "Logia"},
        ["Mera"] = {rarity = "Legendary", type = "Logia"},
        ["Pika"] = {rarity = "Legendary", type = "Logia"},
        ["Magu"] = {rarity = "Legendary", type = "Logia"},
        ["Yami"] = {rarity = "Legendary", type = "Logia"},
        ["Goro"] = {rarity = "Legendary", type = "Logia"},
        ["Yuki"] = {rarity = "Legendary", type = "Logia"},
        ["Suna"] = {rarity = "Legendary", type = "Logia"},
        ["Kage"] = {rarity = "Legendary", type = "Paramecia"},
        ["Zushi"] = {rarity = "Legendary", type = "Paramecia"},
        ["Nikyu"] = {rarity = "Legendary", type = "Paramecia"},
        ["Ito"] = {rarity = "Legendary", type = "Paramecia"},
        
        -- Epic (10.0%)
        ["Yomi"] = {rarity = "Epic", type = "Paramecia"},
        ["Bane"] = {rarity = "Epic", type = "Paramecia"},
        
        -- Rare (26.0%)
        ["Mero"] = {rarity = "Rare", type = "Paramecia"},
        ["Gomu"] = {rarity = "Rare", type = "Paramecia"},
        ["Bari"] = {rarity = "Rare", type = "Paramecia"},
        ["Bomu"] = {rarity = "Rare", type = "Paramecia"},
        ["Horo"] = {rarity = "Rare", type = "Paramecia"},
        
        -- Common (59.5%)
        ["Guru"] = {rarity = "Common", type = "Paramecia"},
        ["Chiyu"] = {rarity = "Common", type = "Paramecia"},
        ["Kilo"] = {rarity = "Common", type = "Paramecia"},
        ["Suke"] = {rarity = "Common", type = "Paramecia"},
        ["Spin"] = {rarity = "Common", type = "Paramecia"}
    }
    return fruitData[fruitName]
end

-- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è GPO
local function formatGPOMessage(inventoryData)
    if not inventoryData or inventoryData == "" then
        return "–ü—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"
    end
    
    local success, inventory = pcall(function()
        return game:GetService("HttpService"):JSONDecode(inventoryData)
    end)
    
    if not success or not inventory then
        return "Error parsing inventory data"
    end
    
    local message = ""
    message = message .. "üë§ Player: " .. PlayerName .. "\n"
    message = message .. "‚è∞ Time: " .. os.date("%Y-%m-%d %H:%M:%S") .. "\n\n"
    
    local categories = {
        Prestige = {},  -- –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        Mythical = {},
        Legendary = {},
        Epic = {},
        Rare = {},
        Common = {},
        Unsorted = {}
    }
    
    -- –°–ø–∏—Å–æ–∫ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    local prestigeItems = {
        ["Prestige Fruit Bag"] = true,
        ["Prestige Firework Daggers"] = true,
        ["Prestige Candy Cane"] = true,
        ["Prestige Firework Lancer"] = true,
        ["Mythical Fruit Chest"] = true,
        ["World Ender"] = true,
        ["All Seeing Eye"] = true,
        ["Chromatic All Seeing Eye"] = true
    }
    
    for item, amount in pairs(inventory) do
        if prestigeItems[item] then
            -- –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é Prestige
            table.insert(categories.Prestige, {
                name = item,
                amount = amount
            })
        else
            local fruitInfo = getGPOFruitRarity(item)
            if fruitInfo then
                table.insert(categories[fruitInfo.rarity], {
                    name = item,
                    amount = amount,
                    type = fruitInfo.type
                })
            else
                table.insert(categories.Unsorted, {
                    name = item,
                    amount = amount
                })
            end
        end
    end
    
    local raritySymbols = {
        ["Prestige"] = "üëë", -- –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        ["Mythical"] = "üåü",
        ["Legendary"] = "‚≠ê",
        ["Epic"] = "üí´",
        ["Rare"] = "‚ú®",
        ["Common"] = "‚ö™"
    }
    
    -- –ü–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    local categoryOrder = {"Prestige", "Mythical", "Legendary", "Epic", "Rare", "Common", "Unsorted"}
    
    for _, rarity in ipairs(categoryOrder) do
        local items = categories[rarity]
        if #items > 0 then
            message = message .. "\n" .. (raritySymbols[rarity] or "üì¶") .. " " .. rarity .. ":\n"
            table.sort(items, function(a, b) return a.name < b.name end)
            
            for _, item in ipairs(items) do
                local typeSymbol = ""
                if item.type then
                    typeSymbol = item.type == "Logia" and "üå™Ô∏è" or
                                item.type == "Paramecia" and "üéØ" or
                                item.type == "Zoan" and "üêæ" or "‚ùì"
                end
                
                message = message .. string.format("‚îî‚îÄ%s %s", typeSymbol or "üíé", item.name)
                if item.amount > 1 then
                    message = message .. string.format(" (x%d)", item.amount)
                end
                message = message .. "\n"
            end
        end
    end
    
    return message
end

local function scanGPO()
    print("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ GPO...")
    local replicatedStorage = game:GetService("ReplicatedStorage")
    if not replicatedStorage then
        return {"‚ùå Error: ReplicatedStorage not available"}
    end
    
    -- –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –ø—É—Ç–∏
    local directPath = "Stats" .. PlayerName
    local directStats = replicatedStorage:FindFirstChild(directPath)
    
    if directStats then
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä—è–º–æ–º—É –ø—É—Ç–∏:", directPath)
        
        if directStats:FindFirstChild("Inventory") then
            local inventoryFolder = directStats.Inventory
            if inventoryFolder:FindFirstChild("Inventory") then
                local inventoryValue = inventoryFolder.Inventory
                if inventoryValue and inventoryValue.Value and inventoryValue.Value ~= "" then
                    print("‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞", PlayerName)
                    local message = formatGPOMessage(inventoryValue.Value)
                    
                    -- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                    local itemsList = {}
                    
                    local success, inventory = pcall(function()
                        return game:GetService("HttpService"):JSONDecode(inventoryValue.Value)
                    end)
                    
                    if success and inventory then
                        for item, amount in pairs(inventory) do
                            local itemEntry = {
                                name = item,
                                amount = amount
                            }
                            
                            table.insert(itemsList, itemEntry)
                        end
                        
                        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è Python
                        if localOutputEnabled then
                            saveResultsToFile("GPO", itemsList)
                        end
                    end
                    
                    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    print("üìù Attempting to write results file...")
                    local fileCheck = pcall(function()
                        writefile("plase_scan_started.txt", os.date("%Y-%m-%d %H:%M:%S"))
                    end)
                    print("üìù File write test result: " .. (fileCheck and "Success" or "Failed"))
                    
                    return splitMessage(message, "GPO")
                else
                    return {"üì≠ GPO Inventory is empty (–ø—Ä—è–º–æ–π –ø—É—Ç—å)"}
                end
            end
        end
    end
    
    -- –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä—è–º–æ–º—É –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...")
    local allStatsFolders = {}
    
    for _, child in pairs(replicatedStorage:GetChildren()) do
        if child.Name:match("^Stats") then
            table.insert(allStatsFolders, child.Name)
            print("–ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", child.Name)
        end
    end
    
    if #allStatsFolders > 0 then
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", table.concat(allStatsFolders, ", "))
    else
        print("‚ùå –ü–∞–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    end
    
    -- –ò—â–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –ª—é–±–æ–π –ø–∞–ø–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    local statsFound = false
    local inventory = nil
    local foundInFolder = ""
    
    for _, child in pairs(replicatedStorage:GetChildren()) do
        if child.Name:match("^Stats") then
            if child:FindFirstChild("Inventory") then
                local inventoryFolder = child.Inventory
                if inventoryFolder:FindFirstChild("Inventory") then
                    local inventoryValue = inventoryFolder.Inventory
                    if inventoryValue and inventoryValue.Value and inventoryValue.Value ~= "" then
                        statsFound = true
                        inventory = inventoryValue.Value
                        foundInFolder = child.Name
                        print("‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –ø–∞–ø–∫–µ:", child.Name)
                        break
                    end
                end
            end
        end
    end
    
    -- –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —à–∞–±–ª–æ–Ω—É Stats, –∏—â–µ–º –ø–æ –≤—Å–µ–º—É ReplicatedStorage
    if not statsFound then
        print("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...")
        
        local function searchForInventory(parent, depth)
            depth = depth or 0
            if depth > 5 then return false end -- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞
            
            for _, child in pairs(parent:GetChildren()) do
                if child.Name == "Inventory" and child:FindFirstChild("Inventory") then
                    local inventoryValue = child.Inventory
                    if inventoryValue and inventoryValue.Value and inventoryValue.Value ~= "" then
                        statsFound = true
                        inventory = inventoryValue.Value
                        foundInFolder = child:GetFullName()
                        print("‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤:", child:GetFullName())
                        return true
                    end
                end
                
                if child:IsA("Instance") and #child:GetChildren() > 0 then
                    if searchForInventory(child, depth + 1) then
                        return true
                    end
                end
            end
            return false
        end
        
        searchForInventory(replicatedStorage)
    end
    
    if not statsFound then
        return {"‚ùå Error: –ü–∞–ø–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    end
    
    if not inventory or inventory == "" then
        return {"üì≠ GPO Inventory is empty"}
    end
    
    -- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPO —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∞–ø–∫–∏
    local message = formatGPOMessage(inventory)
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—à–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    local infoMessage = "**üìÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ –¥–∞–Ω–Ω—ã—Ö:**\n```\n"
    infoMessage = infoMessage .. "–í–∞—à–µ –∏–º—è –≤ Roblox: " .. PlayerName .. "\n"
    infoMessage = infoMessage .. "–ü–∞–ø–∫–∞ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º: " .. foundInFolder .. "\n"
    infoMessage = infoMessage .. "```"
    
    -- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    local itemsList = {}
    
    local success, parsedInventory = pcall(function()
        return game:GetService("HttpService"):JSONDecode(inventory)
    end)
    
    if success and parsedInventory then
        for item, amount in pairs(parsedInventory) do
            local itemEntry = {
                name = item,
                amount = amount
            }
            
            table.insert(itemsList, itemEntry)
        end
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è Python
        if localOutputEnabled then
            saveResultsToFile("GPO", itemsList)
        end
    end
    
    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üìù Attempting to write results file...")
    local fileCheck = pcall(function()
        writefile("plase_scan_started.txt", os.date("%Y-%m-%d %H:%M:%S"))
    end)
    print("üìù File write test result: " .. (fileCheck and "Success" or "Failed"))
    
    local result = splitMessage(message, "GPO")
    table.insert(result, 1, infoMessage) -- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ
    
    return result
end

-- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è MM2
local function formatMM2Message(items)
    if not items or #items == 0 then
        return "–ü—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"
    end
    
    local message = ""
    message = message .. "üë§ Player: " .. PlayerName .. "\n"
    message = message .. "‚è∞ Time: " .. os.date("%Y-%m-%d %H:%M:%S") .. "\n\n"
    
    message = message .. string.format("üìä Total Items: %d\n\n", #items)
    
    -- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    table.sort(items)
    
    message = message .. "üó°Ô∏è Inventory Items:\n"
    for i, itemName in ipairs(items) do
        message = message .. string.format("‚îî‚îÄ %s\n", itemName)
    end
    
    return message
end

-- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è scanMM2
local function scanMM2()
    print("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MM2...")
    
    -- –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    pcall(function()
        writefile("plase_scan_started.txt", os.date("%Y-%m-%d %H:%M:%S"))
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MM2")
    end)
    
    wait(3) -- –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É GUI
    
    local playerGui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then
        print("‚ùå PlayerGui –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"‚ùå Error: PlayerGui not found"}
    end
    
    -- –ü–æ–∏—Å–∫ –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—É—Ç—è–º –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é MM2
    local container = nil
    local potentialPaths = {
        {"MainGUI", "Game", "Crafting", "Inventory", "Salvage", "ScrollFrame", "Container"},
        {"MainGUI", "Inventory", "Items", "Container"},
        {"MM2GUI", "Inventory", "Items"},
        {"GUI", "InventoryFrame", "Container"}
    }
    
    for _, pathParts in ipairs(potentialPaths) do
        local current = playerGui
        local pathValid = true
        
        for i, part in ipairs(pathParts) do
            if current then
                current = current:FindFirstChild(part)
                if not current then
                    pathValid = false
                    print("‚ùå –ß–∞—Å—Ç—å –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " .. part .. " (–ø–æ–∑–∏—Ü–∏—è " .. i .. ")")
                    break
                end
            else
                pathValid = false
                break
            end
        end
        
        if pathValid then
            container = current
            print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è MM2 –ø–æ –ø—É—Ç–∏:", table.concat(pathParts, "."))
            break
        end
    end
    
    -- –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø—É—Ç—è–º, –∏—â–µ–º –ø–æ –≤—Å–µ–º—É GUI
    if not container then
        print("üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ –≤—Å–µ–º—É GUI...")
        local function searchForInventory(parent, depth)
            depth = depth or 0
            if depth > 5 then return false end -- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –ø–æ–∏—Å–∫–∞
            
            for _, child in pairs(parent:GetChildren()) do
                -- –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                if child:IsA("ScrollingFrame") and child:FindFirstChildWhichIsA("Frame") then
                    container = child
                    print("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", child:GetFullName())
                    return true
                elseif child:IsA("Frame") and #child:GetChildren() > 5 then
                    local hasFrames = false
                    for _, subChild in pairs(child:GetChildren()) do
                        if subChild:IsA("Frame") then
                            hasFrames = true
                            break
                        end
                    end
                    
                    if hasFrames then
                        container = child
                        print("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", child:GetFullName())
                        return true
                    end
                end
                
                if child:IsA("Instance") and #child:GetChildren() > 0 then
                    if searchForInventory(child, depth + 1) then
                        return true
                    end
                end
            end
            return false
        end
        
        searchForInventory(playerGui)
    end
    
    if not container then
        print("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è MM2 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        -- –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Python
        if localOutputEnabled then
            print("‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ MM2")
            saveResultsToFile("MM2", {})
        end
        
        return {"‚ùå Error: MM2 Inventory container not found"}
    end
    
    local items = {}
    print("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...")
    
    -- –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    local totalChildren = 0
    local framesFound = 0
    
    -- –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    for _, item in pairs(container:GetChildren()) do
        totalChildren = totalChildren + 1
        
        if item:IsA("Frame") then
            framesFound = framesFound + 1
            print("‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: " .. item.Name)
            table.insert(items, item.Name)
        end
    end
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—Å–µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ " .. totalChildren .. ", –Ω–∞–π–¥–µ–Ω–æ —Ñ—Ä–µ–π–º–æ–≤: " .. framesFound)
    
    -- –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
    if #items == 0 then
        print("‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π...")
        
        -- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—â–µ–º –≤—Å–µ Frame –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        local function findItemsInChildren(parent, depth)
            depth = depth or 0
            if depth > 2 then return end -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞
            
            for _, child in pairs(parent:GetChildren()) do
                if child:IsA("Frame") and not table.find(items, child.Name) then
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ Frame —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
                    if child:FindFirstChild("ItemName") or child:FindFirstChild("Label") then
                        local itemName = child.Name
                        print("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª –ø—Ä–µ–¥–º–µ—Ç: " .. itemName)
                        table.insert(items, itemName)
                    elseif depth == 0 then -- –¢–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                        findItemsInChildren(child, depth + 1)
                    end
                end
            end
        end
        
        findItemsInChildren(container)
        print("üìä –ü–æ—Å–ª–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. #items)
    end
    
    -- –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–∂–µ –µ—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç
    local itemsList = {}
    for _, name in ipairs(items) do
        table.insert(itemsList, {
            name = name
        })
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è Python –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç
    if localOutputEnabled then
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã MM2 –≤ —Ñ–∞–π–ª (–ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. #items .. ")")
        saveResultsToFile("MM2", itemsList)
    end
    
    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üìù Attempting to write completion file...")
    local fileCheck = pcall(function()
        writefile("plase_scan_complete.txt", os.date("%Y-%m-%d %H:%M:%S"))
    end)
    print("üìù Completion file write result: " .. (fileCheck and "Success" or "Failed"))
    
    if #items == 0 then
        print("üì≠ MM2 –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω")
        return {"üì≠ MM2 Inventory is empty or could not be scanned correctly"}
    end
    
    local message = formatMM2Message(items)
    return splitMessage(message, "MM2")
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
local function startScanning()
    if not currentGame then
        -- –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        print("–ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...")
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–≥—Ä
        local playerGui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
        
        if playerGui then
            if playerGui:FindFirstChild("Shop") and playerGui.Shop:FindFirstChild("Holder") and 
               playerGui.Shop.Holder:FindFirstChild("Pages") and playerGui.Shop.Holder.Pages:FindFirstChild("Sword") then
                currentGame = "BladeBall"
                print("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–≥—Ä–∞ Blade Ball")
            elseif playerGui:FindFirstChild("MainGUI") and playerGui.MainGUI:FindFirstChild("Game") and 
                  playerGui.MainGUI.Game:FindFirstChild("Crafting") then
                currentGame = "MM2"
                print("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–≥—Ä–∞ MM2")
            end
        end
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ RePStorage –¥–ª—è GPO
        local repStorage = game:GetService("ReplicatedStorage")
        if repStorage then
            for _, item in pairs(repStorage:GetChildren()) do
                if item.Name:match("^Stats") and item:FindFirstChild("Inventory") then
                    currentGame = "GPO"
                    print("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–≥—Ä–∞ GPO")
                    break
                end
            end
        end
        
        if not currentGame then
            sendToDiscord({"‚ùå Error: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–≥—Ä—ã..."})
            
            -- –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            local allGames = {"BladeBall", "GPO", "MM2"}
            for _, game in ipairs(allGames) do
                print("–ü—Ä–æ–±—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫", game)
                
                local scanFunction = {
                    ["BladeBall"] = scanBladeBall,
                    ["GPO"] = scanGPO,
                    ["MM2"] = scanMM2
                }
                
                local success, result = pcall(function()
                    return scanFunction[game]()
                end)
                
                if success and result and #result > 0 and not result[1]:match("Error") then
                    sendToDiscord(result)
                    print(string.format("‚úÖ %s inventory scan completed", game))
                    return
                end
            end
            
            sendToDiscord({"‚ùå Error: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä"})
            return
        end
    end
    
    local scanFunction = {
        ["BladeBall"] = scanBladeBall,
        ["GPO"] = scanGPO,
        ["MM2"] = scanMM2
    }
    
    print("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã:", currentGame)
    
    local success, result = pcall(function()
        if not scanFunction[currentGame] then
            return {"‚ùå Error: Scan function not found for " .. currentGame}
        end
        return scanFunction[currentGame]()
    end)
    
    if success then
        sendToDiscord(result)
        print(string.format("‚úÖ %s inventory scan completed", currentGame))
    else
        local errorMsg = "‚ùå Error during scan: " .. tostring(result)
        sendToDiscord({errorMsg})
        print(errorMsg)
    end
end

-- –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞
print("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã...")
wait(5) -- –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã
startScanning()
